// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnackbarContent renders error 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={
    Array [
      <WithStyles(ForwardRef(IconButton))
        className="close-mock"
        color="inherit"
        onClick={[MockFunction]}
      >
        <Memo
          className="icon-mock"
        />
      </WithStyles(ForwardRef(IconButton))>,
    ]
  }
  className="error-mock"
  message={
    <span
      className="content-mock"
    >
      <Memo
        className="icon-mock errorIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;

exports[`SnackbarContent renders fullWidth 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={
    Array [
      <WithStyles(ForwardRef(IconButton))
        className="close-mock"
        color="inherit"
        onClick={[MockFunction]}
      >
        <Memo
          className="icon-mock"
        />
      </WithStyles(ForwardRef(IconButton))>,
    ]
  }
  className="success-mock fullWidth-mock"
  message={
    <span
      className="content-mock"
    >
      <Memo
        className="icon-mock successIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;

exports[`SnackbarContent renders info 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={
    Array [
      <WithStyles(ForwardRef(IconButton))
        className="close-mock"
        color="inherit"
        onClick={[MockFunction]}
      >
        <Memo
          className="icon-mock"
        />
      </WithStyles(ForwardRef(IconButton))>,
    ]
  }
  className="info-mock"
  message={
    <span
      className="content-mock"
    >
      <Memo
        className="icon-mock infoIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;

exports[`SnackbarContent renders loading 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={Array []}
  className="loading-mock"
  message={
    <span
      className="content-mock"
    >
      <WithStyles(ForwardRef(CircularProgress))
        className="icon-mock loadingIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;

exports[`SnackbarContent renders success 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={
    Array [
      <WithStyles(ForwardRef(IconButton))
        className="close-mock"
        color="inherit"
        onClick={[MockFunction]}
      >
        <Memo
          className="icon-mock"
        />
      </WithStyles(ForwardRef(IconButton))>,
    ]
  }
  className="success-mock"
  message={
    <span
      className="content-mock"
    >
      <Memo
        className="icon-mock successIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;

exports[`SnackbarContent renders warning 1`] = `
<WithStyles(ForwardRef(SnackbarContent))
  action={
    Array [
      <WithStyles(ForwardRef(IconButton))
        className="close-mock"
        color="inherit"
        onClick={[MockFunction]}
      >
        <Memo
          className="icon-mock"
        />
      </WithStyles(ForwardRef(IconButton))>,
    ]
  }
  className="warning-mock"
  message={
    <span
      className="content-mock"
    >
      <Memo
        className="icon-mock warningIcon-mock"
        size={20}
      />
      <span
        className="message-mock"
      >
        test snackbar
      </span>
    </span>
  }
/>
`;
